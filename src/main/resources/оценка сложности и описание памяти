indUserByValue:

Метод выполняет поиск пользователя по значению.
Алгоритмическая сложность: O(n), где n - количество пользователей в списке sortedByValue.
Метод выполняет линейный поиск, перебирая каждого пользователя в списке sortedByValue до нахождения соответствующего значения. В худшем случае, когда пользователь не найден или находится в конце списка, метод будет выполнять n итераций.

findUserByName:
Метод выполняет поиск пользователя по имени.
Алгоритмическая сложность: O(n), где n - количество пользователей в списке sortedByName.
Метод также выполняет линейный поиск, перебирая каждого пользователя в списке sortedByName до нахождения соответствующего имени. В худшем случае, метод будет выполнять n итераций.

findUserByAccount:
Метод выполняет поиск пользователя по счету.
Алгоритмическая сложность: O(log n), где n - количество пользователей в списке sortedByAccount.
Метод использует бинарный поиск, который работает на отсортированном списке sortedByAccount. За каждую итерацию метод сокращает область поиска вдвое, сравнивая счет пользователя с серединой текущего диапазона. В худшем случае, метод будет выполнять log n итераций, что делает его гораздо более эффективным по сравнению с линейным поиском.

Таким образом, сложность методов findUserByValue и findUserByName составляет O(n), а сложность метода findUserByAccount составляет O(log n), что позволяет его выполнять быстрее на больших списках пользователей.

HashMap позволяет эффективнее использовать память за счет оптимального хранения только фактически добавленных пользователей
, уменьшения дублирования данных и использования хэш-таблицы для более эффективного распределения элементов.
 Это помогает уменьшить объем требуемой памяти и повысить производительность операций доступа и поиска.






